{"version":3,"sources":["serviceWorker.js","components/Form.js","components/Recipes.js","App.js","components/RecipeDetails.js","Router.js","index.js"],"names":["Boolean","window","location","hostname","match","Form","props","onSubmit","getRecipe","style","marginBottom","type","className","name","Recipes","console","log","recipes","map","recipe","key","recipe_id","src","image_url","alt","title","length","substring","publisher","to","pathname","state","API_KEY","App","e","a","async","preventDefault","recipeName","target","elements","value","fetch","api_call","json","data","setState","localStorage","getItem","JSON","parse","this","stringify","setItem","React","Component","RecipeDetails","activeRecipe","componentDidMount","req","res","href","source_url","Router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9241aac5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nconst Form = props => {\n  //   console.log(props);\n  return (\n    <form onSubmit={props.getRecipe} style={{ marginBottom: \"2rem\" }}>\n      <input type=\"text\" className=\"form__input\" name=\"recipeName\" />\n      <button className=\"form__button\">Search</button>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Recipes = props => {\n  console.log(\"Props\", props);\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        {props.recipes.map(recipe => {\n          return (\n            <div\n              key={recipe.recipe_id}\n              className=\"col-md-4\"\n              style={{ marginBottom: \"2rem\" }}\n            >\n              <div className=\"recipes__box\">\n                <img\n                  className=\"recipe__box-img\"\n                  src={recipe.image_url}\n                  alt={recipe.title}\n                />\n                <div className=\"recipe__text\">\n                  <h5 className=\"recipes__title\">\n                    {recipe.title.length < 20\n                      ? `${recipe.title}`\n                      : `${recipe.title.substring(0, 25)}...`}\n                  </h5>\n                  <p className=\"recipes__subtitle\">\n                    Publisher : <span>{recipe.publisher}</span>\n                  </p>\n                </div>\n                <button className=\"recipe_buttons\">\n                  <Link\n                    to={{\n                      pathname: `/recipeDetails/${recipe.recipe_id}`,\n                      state: { recipe: recipe.title }\n                    }}\n                  >\n                    View Recipe\n                  </Link>\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Recipes;\n","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\nimport Recipes from \"./components/Recipes\";\n\nconst API_KEY = \"e8ca15d6d399ee9739ce380ab9cdae35\";\n\nclass App extends React.Component {\n  state = {\n    recipes: []\n  };\n\n  getRecipe = async e => {\n    e.preventDefault();\n    const recipeName = e.target.elements.recipeName.value;\n    const api_call = await fetch(\n      `https://www.food2fork.com/api/search?key=${API_KEY}&q=${recipeName}`\n    );\n\n    const data = await api_call.json();\n    this.setState({ recipes: data.recipes });\n    console.log(this.state.recipes);\n  };\n\n  componentDidMount() {\n    const json = localStorage.getItem(\"recipes\");\n    const recipes = JSON.parse(json);\n    this.setState({ recipes });\n  }\n\n  componentDidUpdate() {\n    const recipes = JSON.stringify(this.state.recipes);\n    localStorage.setItem(\"recipes\", recipes);\n  }\n\n  render() {\n    // const { recipes } = this.state;\n    console.log(this.state);\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h3>Recipe Search</h3>\n        </header>\n        <Form getRecipe={this.getRecipe} />\n        <Recipes recipes={this.state.recipes} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst API_KEY = \"e8ca15d6d399ee9739ce380ab9cdae35\";\n\nclass RecipeDetails extends Component {\n  state = {\n    activeRecipe: []\n  };\n\n  componentDidMount = async () => {\n    const title = this.props.location.state.recipe;\n    const req = await fetch(\n      `https://www.food2fork.com/api/search?key=${API_KEY}&q=${title}`\n    );\n\n    const res = await req.json();\n    this.setState({ activeRecipe: res.recipes[0] });\n    console.log(this.state.activeRecipe);\n  };\n\n  render() {\n    console.log(this.props);\n\n    const recipe = this.state.activeRecipe;\n\n    return (\n      <div className=\"container\">\n        {this.state.activeRecipe.length !== 0 && (\n          <div className=\"active-recipe\">\n            <img\n              className=\"active-recipe__img\"\n              src={recipe.image_url}\n              alt={recipe.title}\n            />\n            <h3 className=\"active-recipe__title\">{recipe.title}</h3>\n            <h4 className=\"active-recipe__publisher\">\n              Publisher: <span>{recipe.publisher}</span>\n            </h4>\n            <p className=\"active-recipe__website\">\n              Website:\n              <span>\n                <a href={recipe.source_url}>{recipe.source_url}</a>\n              </span>\n            </p>\n            <button className=\"active-recipe__button\">\n              <Link to=\"/\">Home</Link>\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default RecipeDetails;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport RecipeDetails from \"./components/RecipeDetails\";\n\nconst Router = () => (\n  <div>\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/recipeDetails/:id\" component={RecipeDetails} />\n      </Switch>\n    </BrowserRouter>\n  </div>\n);\n\nexport default Router;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport Router from \"./Router\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}